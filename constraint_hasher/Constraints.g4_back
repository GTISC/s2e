grammar Constraints;

// Parser rules
constraints: expression+ arrayDeclaration*;
expression: compareExpression 
        | readExpression 
        | parentExpression
        | aliasExpression
        | logicalExpression
        | shiftExpression
        | selectExpression
        | extendExpression
        | literal
        | alias
        ;

aliasExpression: alias ':' parentExpression;
parentExpression: '(' expression ')';
alias: 'N' INTEGER_VALUE;
readExpression:  readOperator dataType expression variable;
readOperator: READLSB | 'Read';
compareExpression: comparisionOperator expression expression;
comparisionOperator: 'Sle'
                    | 'Eq'
                    ;
logicalExpression: logicalOperator dataType expression expression;
logicalOperator: 'And'
                | 'Or'
                ;

shiftExpression: shiftOperator dataType expression expression;
shiftOperator: 'LShr';
extendExpression: extendOperator dataType expression;
extendOperator: 'ZExt';

selectExpression: 'Select' dataType expression expression expression;
indexBuffer: '[' (indexPair  ',')* indexPair ']' ;
indexPair: HEX_VALUE '=' HEX_VALUE ;
buffer: '[' (HEX_VALUE)+ ']' ;
arrayDeclaration: 'array' normal_variable '[' length ']' ':' dataType '->' dataType '=' ('symbolic' | buffer);
literal: integerValue | 'false' | 'true';
length: INTEGER_VALUE;
integerValue: INTEGER_VALUE | HEX_VALUE;
variable: normal_variable | array_variable;
array_variable: indexBuffer atOp normal_variable;
normal_variable: VARIABLE;
dataType: W32 | W8;
atOp: '@';
// Lexer rules
SLE: 'Sle';
READLSB: 'ReadLSB';
W32: 'w32';
W8: 'w8';
HEX_VALUE: '0x' [0-9A-Fa-f]+;
INTEGER_VALUE: [0-9]+;
VARIABLE: [a-z] [0-9A-Za-z_]+;
WS: [ \t\r\n]+ -> skip;

